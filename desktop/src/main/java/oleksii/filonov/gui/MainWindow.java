package oleksii.filonov.gui;

import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.io.File;
import java.util.ResourceBundle;
import javax.swing.*;

import com.jgoodies.forms.layout.CellConstraints;
import com.jgoodies.forms.layout.FormLayout;

public class MainWindow {
    private static ResourceBundle resourceBundle = ResourceBundle.getBundle("localization/bundle");
    private JPanel mainPanel;
    private JButton clientsButton;
    private JButton campaignButton;
    private JButton resultsButton;
    private JLabel pathToClientsFileLabel;
    private JLabel pathToCampaignFileLabel;
    private JLabel pathToResultsFileLabel;
    private File clientsFile;
    private File campaignFile;
    private File resultFile;
    private final JFileChooser fileChooser = new JFileChooser();

    public MainWindow() {
        clientsButton.addActionListener(new ActionListener() {
            @Override
            public void actionPerformed(final ActionEvent event) {
                final int returnValue = fileChooser.showOpenDialog(mainPanel);
                if (returnValue == JFileChooser.APPROVE_OPTION) {
                    clientsFile = fileChooser.getSelectedFile();
                }
            }
        });
    }

    public static void main(final String[] args) {
        JFrame frame = new JFrame(resourceBundle.getString("main.window.title"));
        positionFrameToTheCenter(frame);
        frame.setContentPane(new MainWindow().mainPanel);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.pack();
        frame.setVisible(true);
    }

    private static void positionFrameToTheCenter(JFrame frame) {
        // Get the size of the screen
        final Dimension dim = Toolkit.getDefaultToolkit().getScreenSize();
        // Determine the new location of the window
        final int x = (dim.width) / 3;
        final int y = (dim.height) / 6;
        // Move the window
        frame.setLocation(x, y);
    }

    private void createUIComponents() {
        // TODO: place custom component creation code here
    }

    {
// GUI initializer generated by IntelliJ IDEA GUI Designer
// >>> IMPORTANT!! <<<
// DO NOT EDIT OR ADD ANY CODE HERE!
        $$$setupUI$$$();
    }

    /**
     * Method generated by IntelliJ IDEA GUI Designer
     * >>> IMPORTANT!! <<<
     * DO NOT edit this method OR call it in your code!
     *
     * @noinspection ALL
     */
    private void $$$setupUI$$$() {
        mainPanel = new JPanel();
        mainPanel.setLayout(new FormLayout("fill:15px:noGrow,left:4dlu:noGrow,fill:107px:noGrow,left:17dlu:noGrow,fill:339px:noGrow", "center:19px:noGrow,top:4dlu:noGrow,center:65px:noGrow,top:4dlu:noGrow,center:81px:noGrow,top:4dlu:noGrow,center:86px:noGrow,top:4dlu:noGrow,center:19px:noGrow"));
        pathToClientsFileLabel = new JLabel();
        pathToClientsFileLabel.setText("Path to Clients File");
        CellConstraints cc = new CellConstraints();
        mainPanel.add(pathToClientsFileLabel, cc.xy(5, 3));
        pathToCampaignFileLabel = new JLabel();
        pathToCampaignFileLabel.setText("Path To Campaign File");
        mainPanel.add(pathToCampaignFileLabel, cc.xy(5, 5));
        pathToResultsFileLabel = new JLabel();
        pathToResultsFileLabel.setText("Path to Results File");
        mainPanel.add(pathToResultsFileLabel, cc.xy(5, 7));
        resultsButton = new JButton();
        resultsButton.setEnabled(true);
        resultsButton.setHorizontalTextPosition(0);
        resultsButton.setIcon(new ImageIcon(getClass().getResource("/icons/save.png")));
        this.$$$loadButtonText$$$(resultsButton, ResourceBundle.getBundle("localization/bundle").getString("save.results.button.title"));
        resultsButton.setToolTipText(ResourceBundle.getBundle("localization/bundle").getString("save.results.tooltip"));
        mainPanel.add(resultsButton, cc.xy(3, 7));
        final com.intellij.uiDesigner.core.Spacer spacer1 = new com.intellij.uiDesigner.core.Spacer();
        mainPanel.add(spacer1, cc.xy(3, 9, CellConstraints.FILL, CellConstraints.DEFAULT));
        campaignButton = new JButton();
        campaignButton.setHorizontalTextPosition(0);
        campaignButton.setIcon(new ImageIcon(getClass().getResource("/icons/open_folder_yellow.png")));
        this.$$$loadButtonText$$$(campaignButton, ResourceBundle.getBundle("localization/bundle").getString("open.campaign.button.title"));
        campaignButton.setToolTipText(ResourceBundle.getBundle("localization/bundle").getString("open.campaign.file.tooltip"));
        mainPanel.add(campaignButton, cc.xy(3, 5));
        final com.intellij.uiDesigner.core.Spacer spacer2 = new com.intellij.uiDesigner.core.Spacer();
        mainPanel.add(spacer2, cc.xywh(1, 1, 2, 9, CellConstraints.DEFAULT, CellConstraints.FILL));
        final com.intellij.uiDesigner.core.Spacer spacer3 = new com.intellij.uiDesigner.core.Spacer();
        mainPanel.add(spacer3, cc.xyw(3, 1, 3, CellConstraints.FILL, CellConstraints.DEFAULT));
        clientsButton = new JButton();
        clientsButton.setHideActionText(false);
        clientsButton.setHorizontalTextPosition(0);
        clientsButton.setIcon(new ImageIcon(getClass().getResource("/icons/open_folder_yellow.png")));
        this.$$$loadButtonText$$$(clientsButton, ResourceBundle.getBundle("localization/bundle").getString("open.clients.button.title"));
        clientsButton.setToolTipText(ResourceBundle.getBundle("localization/bundle").getString("open.clients.file.tooltip"));
        mainPanel.add(clientsButton, cc.xy(3, 3));
    }

    /**
     * @noinspection ALL
     */
    private void $$$loadButtonText$$$(AbstractButton component, String text) {
        StringBuffer result = new StringBuffer();
        boolean haveMnemonic = false;
        char mnemonic = '\0';
        int mnemonicIndex = -1;
        for (int i = 0; i < text.length(); i++) {
            if (text.charAt(i) == '&') {
                i++;
                if (i == text.length()) break;
                if (!haveMnemonic && text.charAt(i) != '&') {
                    haveMnemonic = true;
                    mnemonic = text.charAt(i);
                    mnemonicIndex = result.length();
                }
            }
            result.append(text.charAt(i));
        }
        component.setText(result.toString());
        if (haveMnemonic) {
            component.setMnemonic(mnemonic);
            component.setDisplayedMnemonicIndex(mnemonicIndex);
        }
    }

    /**
     * @noinspection ALL
     */
    public JComponent $$$getRootComponent$$$() {
        return mainPanel;
    }
}
